node {
        // Project specific properties
    GITHUB_BASE_URL = "https://github.ccta.dk"
    GITHUB_API_PREFIX = "api/v3/repos"
    GITHUB_CREDENTIALS_ID = "svc-jenkins-github-devops"
    ARTIFACTORY_SERVER_ID = "artifactory.ccta.dk"
    ARTIFACTORY_CREDENTIALS_ID = "svc-artifactory-service-z24rhel"
    //ARTIFACTORY_SERVER_URL = "https://artifactory.ccta.dk/"
    DOCKER_REGISTRY_SECRET_FILE_ID = "svc-artifactory-service-z24rhel-dockerconfig"
    DOCKER_REGISTRY = 'docker-local.artifactory.ccta.dk'
    DOCKER_NAMESPACE = 'ejendomsdata'
    OPENSHIFT_CLUSTER_URL = 'https://ocpt.ccta.dk:8443'
    OPENSHIFT_TOKEN_CREDENTIALS_ID = "svc-jenkinsdeployer-ejendomsdata"
    // FIXME: Need to be able to take this from the pom.xml, so we can use the mvn:versions plugin to automate the update process of this dependency
    BUILDER_IMAGE = "devops-docker-local.artifactory.ccta.dk/devops/builder:0.1"
    MASTER_BRANCH = "master"
    // Release branchnvngivningen skal repræsentre en nummereret version
    // Eksempel på release branchnavngning for version 1.2.3: release/1.2.3
    // Det er også muligt kun at angie major+minor (version 1.2): release/1.2
    // Hvert versionsnummersegment kan være 1-3 tal (version 999.999.999 er dermed også gyldig, men måske mindre realistisk)
    RELEASE_PATTERN = /release\/\d{1,3}\.\d{1,3}(\.\d{1,3})?/
    // Dette tag pattern følger samme struktur som for releases. Der kan angives major.minor.patch, eller blot major.minor.
    // Versionsnummeret forventes at være præfiskset med "v".
    // Efter Versionsnummeret kan der være en valgfri tekst.
    // Følgende eksempler er gyldige: v1.2.3, v1.2, v1.2.3-alpha
    TAG_PATTERN = /v\d{1,3}\.\d{1,3}(\.\d{1,3})?(-rc-\d{1,2})?/
    PULL_REQUEST_PATTERN = /PR-\d{1,5}/
    FEATURE_PATTERN = /feature\/.+/
    BUGFIX_PATTERN = /bugfix\/.+/

    if (params.merge_status == null) {
        stage('Initial Build Setup') {
            echo "Nothing to do in the initial build, other than setting up the build triggers."

            // Todo: Setup and configured needed webhook in GitHub.
            // Let's read artifactId from pom.xml
            checkout scm
            pom = readMavenPom file: 'pom.xml'
            def artifactId = pom.artifactId
            echo "artifactId: " + artifactId


            properties(
                [
                    [$class: 'RebuildSettings',
                     autoRebuild: false,
                     rebuildDisabled: true
                 ],
                 buildDiscarder(
                     logRotator(    artifactDaysToKeepStr: '',
                                                artifactNumToKeepStr: '',
                                                daysToKeepStr: '5',
                                                numToKeepStr: '5'
                                         )
                 ),
                 parameters(
                        [    string(                defaultValue: 'false',                                         description: '', name: 'merge_status',     trim: false),
                            string(                defaultValue: 'none',                                         description: '', name: 'current_status',     trim: false),
                            string(                defaultValue: 'not_set',                                     description: '', name: 'pr_branch_name',     trim: false),
                            string(                defaultValue: 'url-to-repo-not-defined',    description: '', name: 'html_url',                 trim: false),
                            string(                defaultValue: '0',                                                 description: '', name: 'pr_number',             trim: false),
                            string(                defaultValue: 'not-set',                                     description: '', name: 'pr_payload',             trim: false)
                        ]
                    ),
                 pipelineTriggers([
                        GenericTrigger(    causeString: 'PR Merged',
                                                        genericVariables: [
                                                                    [defaultValue: '',             key: 'current_status',     regexpFilter: '',                 value: '$.action'],
                                                                    [defaultValue: 'false', key: 'merge_status',         regexpFilter: '[^false]', value: '$.pull_request.merged'],
                                                                    [defaultValue: '',             key: 'pr_branch_name',     regexpFilter: '',                 value: '$.pull_request.base.ref'],
                                                                    [defaultValue: '',             key: 'html_url',                 regexpFilter: '',                 value: '$.pull_request.head.repo.html_url'],
                                                                    [defaultValue: '',             key: 'pr_number',             regexpFilter: '',                 value: '$.number'],
                                                                    [defaultValue: 'empty', key: 'pr_payload',             regexpFilter: '',                 value: '$.']
                                                        ],
                                                        printContributedVariables: true,
                                                        printPostContent: true,
                                                        regexpFilterExpression: '',
                                                        regexpFilterText: '',
                                                        token: artifactId
                                                    )
                                                ]
                        )
                 ]
             )

            currentBuild.result = "SUCCESS"
        }
        return
    }


    //def server = Artifactory.server ARTIFACTORY_SERVER_ID
    def undeployProject = Artifactory.newMavenBuild()
    def server = Artifactory.server ARTIFACTORY_SERVER_ID
    server.credentialsId = ARTIFACTORY_CREDENTIALS_ID
    undeployProject.deployer releaseRepo: 'libs-release-local', snapshotRepo:'libs-snapshot-local', server: server
    undeployProject.resolver releaseRepo: 'libs-release', snapshotRepo:'libs-snapshot', server: server
    //def rtMaven = Artifactory.newMavenBuild()
//    def buildInfo = Artifactory.newBuildInfo()

    // Docker image to handle build
    def kanikoImage = docker.image(BUILDER_IMAGE);

    try {

        stage('Setup webhook') {
            checkout scm

            // Todo: Setup and configured needed webhook in GitHub.
            // Let's read artifactId from pom.xml
            pom = readMavenPom file: 'pom.xml'
            def artifactId = pom.artifactId
            echo "artifactId: " + artifactId


             sh '''
             mkdir -p "$WORKSPACE"/.m2
             mkdir -p "$WORKSPACE"/.kaniko-cache
             chown -R 994:990 .kaniko-cache
             '''

              String projectScmUrl = ""
              String webhookUrl = JENKINS_URL + 'generic-webhook-trigger/invoke?token=' + artifactId
                echo "Project webhook URL: " + webhookUrl
                kanikoImage.inside('-v $WORKSPACE/.m2:/kaniko/.m2 -v $WORKSPACE/.kaniko-cache:/cache:rw,z') {
                    withEnv(['HOME=/kaniko', 'MAVEN_HOME=/usr/lib/mvn']) {
                        def name = sh script: 'mvn help:evaluate -Dexpression=github.repository.name -q -DforceStdout', returnStdout: true
                        def owner = sh script: 'mvn help:evaluate -Dexpression=github.repository.owner -q -DforceStdout', returnStdout: true
                        projectScmUrl = GITHUB_BASE_URL + '/' + GITHUB_API_PREFIX + '/' + owner + '/' + name
                    }
                }
                echo "URL: " + projectScmUrl

                withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, passwordVariable: 'PW', usernameVariable: 'USERNAME')]) {
                    // Check that we haven't already created the hook
                    def hookCreated = false
                    sh 'curl --fail -u ${USERNAME}:${PW} -H "Accept: application/vnd.github.v3+json" ' + projectScmUrl + '/hooks > hooks.json'
                    def gitHubHooks = readJSON file: 'hooks.json', text: ''
                    echo "Hooks result: " + gitHubHooks
                    for (hook in gitHubHooks) {
                        echo "Hook (url): " + hook.config.url
                        if (hook.config.url == webhookUrl) {
                            echo "Webhook already exists"
                            hookCreated = true
                            break
                        }
                    }
                    if (!hookCreated) {
                            sh '''
                            curl --fail \
                            -u ${USERNAME}:${PW} \
                            -X POST \
                            -H "Accept: application/vnd.github.v3+json" \
                            ''' + projectScmUrl + '''/hooks \
                            -d '{"config":{"url":"''' + JENKINS_URL + '''generic-webhook-trigger/invoke?token=''' + artifactId + '''","content_type":"json"},"events":["pull_request"]}'
                            '''
                    }
             }
        }
        echo "Result from github. Merged: " + merge_status
        if (merge_status == false || merge_status == "false") {
            echo "PR not merged. Stopping the build here."
            // PR is not merged. Our build descriptor likely just got udpated
            // So let's not run the cleanup
            currentBuild.result = "SUCCESS"
            return
        } else {
            echo "PR is merged. Let's start the cleanup process"
        }
        stage('Clone branch') {
            dir('project_code_base') {
                git branch: pr_branch_name, credentialsId: 'svc-jenkins-github-devops', url: html_url
            }
        }
        stage('Cleanup environment') {
            stage('Setup') {

                sh '''
                mkdir -p "$WORKSPACE"/.m2
                mkdir -p "$WORKSPACE"/.kaniko-cache
                chown -R 994:990 .kaniko-cache
                '''
            }
            // Trigger cleanup
            if(pr_branch_name =~ RELEASE_PATTERN) {
                stage ('Clean branch') {
                    withCredentials([usernamePassword(credentialsId: 'svc-artifactory-service-z24rhel', passwordVariable: 'PW', usernameVariable: 'USERNAME')]) {
                        kanikoImage.inside('-v $WORKSPACE/.m2:/kaniko/.m2 -v $WORKSPACE/.kaniko-cache:/cache:rw,z') {
                            withEnv(['HOME=/kaniko', 'MAVEN_HOME=/usr/lib/mvn']) {
                                withCredentials([string(credentialsId: OPENSHIFT_TOKEN_CREDENTIALS_ID, variable: 'TOKEN')]) {
                                    sh 'oc login ' + OPENSHIFT_CLUSTER_URL + ' --token="$TOKEN"'
                                    // FIXME: We should not have a dependency to specific jenkins config, inside a container if it can be avoided
                                    //undeployProject.tool = 'CONTAINER_MAVEN_TOOL' // Tool name from Jenkins configuration
                                    dir('project_code_base') {
                                        //undeployProject.run pom: 'pom.xml', goals: 'clean oc:resource@prepare-for-integration-test oc:undeploy -e ' + calculateMavenVersionParameterString(pr_branch_name)
                                        sh 'mvn clean oc:resource@prepare-for-integration-test oc:undeploy -e ' + calculateMavenVersionParameterString(pr_branch_name) + ''
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // FIXME: How to decide when to cleanup the TAG deployment

            stage('Clean PR') {
                withCredentials([usernamePassword(credentialsId: 'svc-artifactory-service-z24rhel', passwordVariable: 'PW', usernameVariable: 'USERNAME')]) {
                    kanikoImage.inside('-v $WORKSPACE/.m2:/kaniko/.m2 -v $WORKSPACE/.kaniko-cache:/cache:rw,z') {
                        withEnv(['HOME=/kaniko', 'MAVEN_HOME=/usr/lib/mvn']) {
                            withCredentials([string(credentialsId: OPENSHIFT_TOKEN_CREDENTIALS_ID, variable: 'TOKEN')]) {
                                sh 'oc login ' + OPENSHIFT_CLUSTER_URL + ' --token="$TOKEN"'
                                // FIXME: We should not have a dependency to specific jenkins config, inside a container if it can be avoided
                                //undeployProject.tool = 'CONTAINER_MAVEN_TOOL' // Tool name from Jenkins configuration
                                dir('project_code_base') {
                                    //undeployProject.run pom: 'pom.xml', goals: 'clean oc:resource@prepare-for-integration-test oc:undeploy -e ' + calculateMavenVersionParameterString('PR-' + pr_number)
                                    sh 'mvn clean oc:resource@prepare-for-integration-test oc:undeploy -e ' + calculateMavenVersionParameterString('PR-' + pr_number) + ''
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch (e) {
        cleanWs()
        error "Something bad happened. Stopping the build.\n" + e
    } finally {
        //
    }
}

def calculateMavenVersionParameterString(String branchName) {
    String mavenArgs = ""
    pom = readMavenPom file: 'pom.xml'
    def artifactId = pom.artifactId

    if (branchName =~ RELEASE_PATTERN) {
        echo "Building a release candidate"
        mavenArgs += " -Poverride-service-name -Dchangelist=-rc-$BUILD_NUMBER"
    } else if (branchName =~ TAG_PATTERN) {
        echo "Building a release for tag $BRANCH_NAME"
        mavenArgs += " -Dchangelist="
    } else {
        echo "Building feature og bugfix branch"
        echo "setting args"
        mavenArgs += " -Poverride-service-name -Dservice.name=" + artifactId + calculateSafeFromBranchName(artifactId, branchName) + " -Dsha1=" + calculateSafeFromBranchName(artifactId, branchName)
    }

    return mavenArgs
}

def calculateSafeFromBranchName(String artifactId, String branchName) {
    echo "BRANCH_NAME: " + branchName
    String prefix = "-"

    branchName = branchName.replaceAll('\\.','-').replaceAll('\\/','-').toLowerCase()
    branchName = branchName.replaceAll('æ','ae').replaceAll('ø','oe').replaceAll('å','aa')

    // Maximum allowed names in Kubernetes are 63. Let's stay under that
    int maxLength = 60 - (artifactId.length() + "-SNAPSHOT".length())
    if (branchName.length() > maxLength) {
        def safeBranchName = branchName.substring(0, maxLength).toLowerCase()
        if (safeBranchName.substring(safeBranchName.length()-1) =~ "^-") {
            safeBranchName = branchName.substring(0, safeBranchName.length()-1)
        }
        return prefix + safeBranchName
    }
    return prefix + branchName.toLowerCase()
}
